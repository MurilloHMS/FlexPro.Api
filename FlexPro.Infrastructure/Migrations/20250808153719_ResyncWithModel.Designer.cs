// <auto-generated />
using System;
using FlexPro.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FlexPro.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250808153719_ResyncWithModel")]
    partial class ResyncWithModel
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DepartamentoProdutoLoja", b =>
                {
                    b.Property<int>("DepartamentosId")
                        .HasColumnType("integer");

                    b.Property<int>("ProdutosLojaId")
                        .HasColumnType("integer");

                    b.HasKey("DepartamentosId", "ProdutosLojaId");

                    b.HasIndex("ProdutosLojaId");

                    b.ToTable("DepartamentoProdutoLoja");
                });

            modelBuilder.Entity("FlexPro.Domain.Entities.Abastecimento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Combustivel")
                        .HasColumnType("text");

                    b.Property<DateTime>("DataDoAbastecimento")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Departamento")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("DiferencaHodometro")
                        .HasColumnType("double precision");

                    b.Property<double>("HodometroAnterior")
                        .HasColumnType("double precision");

                    b.Property<double>("HodometroAtual")
                        .HasColumnType("double precision");

                    b.Property<double>("Litros")
                        .HasColumnType("double precision");

                    b.Property<double>("MediaKm")
                        .HasColumnType("double precision");

                    b.Property<string>("NomeDoMotorista")
                        .HasColumnType("text");

                    b.Property<string>("Placa")
                        .HasColumnType("text");

                    b.Property<decimal>("Preco")
                        .HasColumnType("numeric");

                    b.Property<string>("Uf")
                        .HasColumnType("text");

                    b.Property<decimal>("ValorTotalTransacao")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("Abastecimento");
                });

            modelBuilder.Entity("FlexPro.Domain.Entities.AcessoRemoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Conexao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("IdComputador")
                        .HasColumnType("integer");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TipoAcessoRemoto")
                        .HasColumnType("integer");

                    b.Property<string>("Usuario")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdComputador");

                    b.ToTable("AcessoRemoto");
                });

            modelBuilder.Entity("FlexPro.Domain.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Departamento")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("FlexPro.Domain.Entities.Arquivo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Extensions")
                        .HasMaxLength(6)
                        .HasColumnType("varchar")
                        .HasColumnName("file_extensions");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean")
                        .HasColumnName("is_public");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar")
                        .HasColumnName("file_name");

                    b.Property<long>("Size")
                        .HasColumnType("bigint")
                        .HasColumnName("file_size");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("archives", (string)null);
                });

            modelBuilder.Entity("FlexPro.Domain.Entities.Categoria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("Categoria");
                });

            modelBuilder.Entity("FlexPro.Domain.Entities.Contato", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DataSolicitadoContato")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Email");

                    b.Property<string>("Mensagem")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Mensagem");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Nome");

                    b.Property<string>("NomeEmpresa")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("NomeEmpresa");

                    b.Property<string>("Outro")
                        .HasColumnType("text")
                        .HasColumnName("outro");

                    b.Property<int>("StatusContato")
                        .HasColumnType("integer");

                    b.Property<int>("TipoContato")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Contato", (string)null);
                });

            modelBuilder.Entity("FlexPro.Domain.Entities.Departamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ProdutoLojaId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Departamento");
                });

            modelBuilder.Entity("FlexPro.Domain.Entities.Email", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("email_address");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("is_enabled");

                    b.HasKey("Id");

                    b.ToTable("emails_smtp", (string)null);
                });

            modelBuilder.Entity("FlexPro.Domain.Entities.Embalagem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ProdutoLojaId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantidade")
                        .HasColumnType("integer");

                    b.Property<int>("Tamanho")
                        .HasColumnType("integer");

                    b.Property<int>("TipoEmbalagem")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProdutoLojaId");

                    b.ToTable("Embalagem");
                });

            modelBuilder.Entity("FlexPro.Domain.Entities.Entidade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean");

                    b.Property<string>("CodigoSistema")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.HasKey("Id");

                    b.ToTable("Entidade", (string)null);

                    b.HasDiscriminator<string>("Tipo").HasValue("Entidade");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("FlexPro.Domain.Entities.Equipamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.HasKey("Id");

                    b.ToTable("Equipamento");

                    b.HasDiscriminator<string>("Tipo").HasValue("Equipamento");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("FlexPro.Domain.Entities.Especificacoes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Armazenamento")
                        .HasColumnType("integer");

                    b.Property<int>("IdComputador")
                        .HasColumnType("integer");

                    b.Property<int>("MemoriaRam")
                        .HasColumnType("integer");

                    b.Property<string>("Processador")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TipoArmazenamento")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdComputador")
                        .IsUnique();

                    b.ToTable("Especificacoes");
                });

            modelBuilder.Entity("FlexPro.Domain.Entities.Funcionario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Departamento")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Gerente")
                        .HasColumnType("text");

                    b.Property<string>("Hash")
                        .HasColumnType("text");

                    b.Property<string>("Hierarquia")
                        .HasColumnType("text");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Funcionarios");
                });

            modelBuilder.Entity("FlexPro.Domain.Entities.InventoryMovement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Data")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<string>("SystemId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar")
                        .HasColumnName("system_code");

                    b.HasKey("Id");

                    b.ToTable("inventory_movements", (string)null);
                });

            modelBuilder.Entity("FlexPro.Domain.Entities.Products", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("MinimumStock")
                        .HasColumnType("int")
                        .HasColumnName("minimum_stock");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<string>("SystemCode")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("TEXT")
                        .HasColumnName("system_code");

                    b.HasKey("Id");

                    b.ToTable("inventory_products", (string)null);
                });

            modelBuilder.Entity("FlexPro.Domain.Entities.Produto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CodigoSistema")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.HasKey("Id");

                    b.ToTable("produto", (string)null);

                    b.HasDiscriminator<string>("Tipo").HasValue("Produto");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("FlexPro.Domain.Entities.Receita", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("Caixas")
                        .HasColumnType("double precision");

                    b.Property<double>("Embalagem")
                        .HasColumnType("double precision");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("ValorMaoDeObra")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("Receita");
                });

            modelBuilder.Entity("FlexPro.Domain.Entities.ReceitaMateriaPrima", b =>
                {
                    b.Property<int>("ReceitaId")
                        .HasColumnType("integer");

                    b.Property<int>("MateriaPrimaId")
                        .HasColumnType("integer");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("QuantidadeFormula")
                        .HasColumnType("numeric");

                    b.HasKey("ReceitaId", "MateriaPrimaId");

                    b.HasIndex("MateriaPrimaId");

                    b.ToTable("ReceitaMateriaPrima");
                });

            modelBuilder.Entity("FlexPro.Domain.Entities.Revisao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Data")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Kilometragem")
                        .HasColumnType("integer");

                    b.Property<int>("LocalId")
                        .HasColumnType("integer");

                    b.Property<string>("Motorista")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NotaFiscal")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Observacao")
                        .HasColumnType("text");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("VeiculoId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LocalId");

                    b.HasIndex("VeiculoId");

                    b.ToTable("Revisao");
                });

            modelBuilder.Entity("FlexPro.Domain.Entities.Veiculo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double?>("ConsumoRodoviarioAlcool")
                        .HasColumnType("double precision");

                    b.Property<double?>("ConsumoRodoviarioGasolina")
                        .HasColumnType("double precision");

                    b.Property<double?>("ConsumoUrbanoAlcool")
                        .HasColumnType("double precision");

                    b.Property<double?>("ConsumoUrbanoGasolina")
                        .HasColumnType("double precision");

                    b.Property<string>("Marca")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Placa")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Veiculo", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("FlexPro.Domain.Entities.Cliente", b =>
                {
                    b.HasBaseType("FlexPro.Domain.Entities.Entidade");

                    b.Property<string>("Contato")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("MeioDeContato")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("Cliente");
                });

            modelBuilder.Entity("FlexPro.Domain.Entities.Parceiro", b =>
                {
                    b.HasBaseType("FlexPro.Domain.Entities.Entidade");

                    b.Property<string>("EmailTeste")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RazaoSocial")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("RecebeEmail")
                        .HasColumnType("boolean");

                    b.HasDiscriminator().HasValue("Parceiro");
                });

            modelBuilder.Entity("FlexPro.Domain.Entities.PrestadorDeServico", b =>
                {
                    b.HasBaseType("FlexPro.Domain.Entities.Entidade");

                    b.HasDiscriminator().HasValue("PrestSer");
                });

            modelBuilder.Entity("FlexPro.Domain.Entities.Vendedor", b =>
                {
                    b.HasBaseType("FlexPro.Domain.Entities.Entidade");

                    b.Property<string>("Departamento")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Gerente")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Hierarquia")
                        .HasColumnType("integer");

                    b.Property<int>("TipoVendedor")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("Vendedor");
                });

            modelBuilder.Entity("FlexPro.Domain.Entities.Computador", b =>
                {
                    b.HasBaseType("FlexPro.Domain.Entities.Equipamento");

                    b.Property<bool>("Interno")
                        .HasColumnType("boolean");

                    b.Property<string>("Marca")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("Computador");
                });

            modelBuilder.Entity("FlexPro.Domain.Entities.MateriaPrima", b =>
                {
                    b.HasBaseType("FlexPro.Domain.Entities.Produto");

                    b.Property<decimal?>("QuantidadeProducao")
                        .HasColumnType("numeric");

                    b.Property<int>("TipoEstoque")
                        .HasColumnType("integer");

                    b.Property<int>("TipoMateriaPrima")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("materiaPrima");
                });

            modelBuilder.Entity("FlexPro.Domain.Entities.ProdutoLoja", b =>
                {
                    b.HasBaseType("FlexPro.Domain.Entities.Produto");

                    b.Property<string>("Cor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Diluicao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("Imagem")
                        .HasColumnType("bytea");

                    b.HasDiscriminator().HasValue("ProdutoLoja");
                });

            modelBuilder.Entity("DepartamentoProdutoLoja", b =>
                {
                    b.HasOne("FlexPro.Domain.Entities.Departamento", null)
                        .WithMany()
                        .HasForeignKey("DepartamentosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlexPro.Domain.Entities.ProdutoLoja", null)
                        .WithMany()
                        .HasForeignKey("ProdutosLojaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FlexPro.Domain.Entities.AcessoRemoto", b =>
                {
                    b.HasOne("FlexPro.Domain.Entities.Computador", "Computador")
                        .WithMany("AcessosRemotos")
                        .HasForeignKey("IdComputador")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Computador");
                });

            modelBuilder.Entity("FlexPro.Domain.Entities.Embalagem", b =>
                {
                    b.HasOne("FlexPro.Domain.Entities.ProdutoLoja", "ProdutoLoja")
                        .WithMany("Embalagems")
                        .HasForeignKey("ProdutoLojaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProdutoLoja");
                });

            modelBuilder.Entity("FlexPro.Domain.Entities.Especificacoes", b =>
                {
                    b.HasOne("FlexPro.Domain.Entities.Computador", "Computador")
                        .WithOne("Especificacoes")
                        .HasForeignKey("FlexPro.Domain.Entities.Especificacoes", "IdComputador")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Computador");
                });

            modelBuilder.Entity("FlexPro.Domain.Entities.ReceitaMateriaPrima", b =>
                {
                    b.HasOne("FlexPro.Domain.Entities.MateriaPrima", "MateriaPrima")
                        .WithMany("ReceitaMateriaPrima")
                        .HasForeignKey("MateriaPrimaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlexPro.Domain.Entities.Receita", "Receita")
                        .WithMany("ReceitaMateriaPrima")
                        .HasForeignKey("ReceitaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MateriaPrima");

                    b.Navigation("Receita");
                });

            modelBuilder.Entity("FlexPro.Domain.Entities.Revisao", b =>
                {
                    b.HasOne("FlexPro.Domain.Entities.PrestadorDeServico", "Local")
                        .WithMany()
                        .HasForeignKey("LocalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlexPro.Domain.Entities.Veiculo", "Veiculo")
                        .WithMany()
                        .HasForeignKey("VeiculoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Local");

                    b.Navigation("Veiculo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("FlexPro.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("FlexPro.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlexPro.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("FlexPro.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FlexPro.Domain.Entities.Receita", b =>
                {
                    b.Navigation("ReceitaMateriaPrima");
                });

            modelBuilder.Entity("FlexPro.Domain.Entities.Computador", b =>
                {
                    b.Navigation("AcessosRemotos");

                    b.Navigation("Especificacoes");
                });

            modelBuilder.Entity("FlexPro.Domain.Entities.MateriaPrima", b =>
                {
                    b.Navigation("ReceitaMateriaPrima");
                });

            modelBuilder.Entity("FlexPro.Domain.Entities.ProdutoLoja", b =>
                {
                    b.Navigation("Embalagems");
                });
#pragma warning restore 612, 618
        }
    }
}
